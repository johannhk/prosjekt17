// Generated by gencpp from file trollnode/Expression.msg
// DO NOT EDIT!


#ifndef TROLLNODE_MESSAGE_EXPRESSION_H
#define TROLLNODE_MESSAGE_EXPRESSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trollnode
{
template <class ContainerAllocator>
struct Expression_
{
  typedef Expression_<ContainerAllocator> Type;

  Expression_()
    : speech()
    , expression()
    , look()  {
    }
  Expression_(const ContainerAllocator& _alloc)
    : speech(_alloc)
    , expression(_alloc)
    , look(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _speech_type;
  _speech_type speech;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _expression_type;
  _expression_type expression;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _look_type;
  _look_type look;




  typedef boost::shared_ptr< ::trollnode::Expression_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trollnode::Expression_<ContainerAllocator> const> ConstPtr;

}; // struct Expression_

typedef ::trollnode::Expression_<std::allocator<void> > Expression;

typedef boost::shared_ptr< ::trollnode::Expression > ExpressionPtr;
typedef boost::shared_ptr< ::trollnode::Expression const> ExpressionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trollnode::Expression_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trollnode::Expression_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace trollnode

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trollnode': ['/home/johs/prosjekt/temp_ws/src/trollnode-master/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::trollnode::Expression_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trollnode::Expression_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trollnode::Expression_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trollnode::Expression_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trollnode::Expression_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trollnode::Expression_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trollnode::Expression_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4b0b66f4e8edc3a85581ccec469d88c";
  }

  static const char* value(const ::trollnode::Expression_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4b0b66f4e8edc3aULL;
  static const uint64_t static_value2 = 0x85581ccec469d88cULL;
};

template<class ContainerAllocator>
struct DataType< ::trollnode::Expression_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trollnode/Expression";
  }

  static const char* value(const ::trollnode::Expression_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trollnode::Expression_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string speech		#The troll will say this out loud. Write normal english.\n\
string expression 	#shortform for the expression, like angry, smile, etc. \n\
string look			#where the troll should look. left, right, up, down\n\
";
  }

  static const char* value(const ::trollnode::Expression_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trollnode::Expression_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speech);
      stream.next(m.expression);
      stream.next(m.look);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Expression_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trollnode::Expression_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trollnode::Expression_<ContainerAllocator>& v)
  {
    s << indent << "speech: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.speech);
    s << indent << "expression: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.expression);
    s << indent << "look: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.look);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TROLLNODE_MESSAGE_EXPRESSION_H
